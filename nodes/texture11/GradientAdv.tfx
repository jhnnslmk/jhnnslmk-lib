//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = WRAP;
    AddressV = WRAP;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float Gradient(float x0, float x1, float x)
{
	return smoothstep(x0, x1, x);
}

#define PI 3.1416;
#define TWOPI 6.2832;
float4x4 Vrotate(float rotX, 
         float rotY, 
         float rotZ)
  {
   rotX *= TWOPI;
   rotY *= TWOPI;
   rotZ *= TWOPI;
   float sx = sin(rotX);
   float cx = cos(rotX);
   float sy = sin(rotY);
   float cy = cos(rotY);
   float sz = sin(rotZ);
   float cz = cos(rotZ);
 
   return float4x4( cz*cy+sz*sx*sy, sz*cx, cz*-sy+sz*sx*cy, 0,
                   -sz*cy+cz*sx*sy, cz*cx, sz*sy+cz*sx*cy , 0,
                    cx * sy       ,-sx   , cx * cy        , 0,
                    0             , 0    , 0              , 1);
  }

float2 From;
float2 To;
float4x4 tTex <string uiname="Texture Transform"; bool uvspace=true; >;
float4 PS(psInput input) : SV_Target
{
	float2 v = To-From;
	float angle = atan2(v.y, v.x) / TWOPI;
	float2 uv = mul(float4(input.uv-float2(0.5f.xx), 0, 0), Vrotate(0, 0, angle)).xy + float2(0.5f.xx);
	float g = (angle > 0.5f) ? Gradient(From.x, To.x, uv.x) : Gradient(From.y, To.y, uv.y);
	
	
	float4 col0 = float4(0,0,0,1);
	float4 col1 = float4(1,1,1,1);
	float c = lerp(col0, col1, Gradient(From.y, To.y, uv.y));
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



