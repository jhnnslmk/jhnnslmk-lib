//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits:

Texture2D texture2d : PREVIOUS;
float4x4 tTex <string uiname="Texture Transform"; bool uvspace=true; >;

StructuredBuffer<float4> ColorBuffer;
StructuredBuffer<float> BreakPointBuffer;

SamplerState linearSampler : IMMUTABLE
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float4 Tint <bool color = true;> = {1,1,1,1};
float4 PS(psInput input) : SV_Target
{
	uint size, stride;
	ColorBuffer.GetDimensions(size, stride);
	
	float2 uv = mul(input.uv, tTex);
	
	float4 c = 0.0f.xxxx;
	
	if (size == 1) c = ColorBuffer[0];
	
	if (size > 1)
	{
		for (uint i = 0; i < size-1; i++)
		{
//			float f = (i%2==1) ? 2 : 0.5f;
//			f = 2;
			c += (uv.x >= BreakPointBuffer[i] && uv.x <= BreakPointBuffer[i+1]) * lerp(ColorBuffer[i], ColorBuffer[i+1], smoothstep(BreakPointBuffer[i], BreakPointBuffer[i+1], uv.x));
		}
	}
	
	return c * Tint;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_5_0,PS()));
	}
}



